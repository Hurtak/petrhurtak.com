- obrazky.cz
  - scrolling horizontally along with overlaping element
  - mobile filters bubble toggling

- git basics
  - add remote
  - merge upstream changes into your fork
  - reset to remote branch
  - squash changes and force push
    - https://stackoverflow.com/questions/25356810/git-how-to-squash-all-commits-on-branch

- robots.txt review - make article

- how to write blogs
  - everything own
    - bad, hard to upgrade/extend, takes a long time
  - next.js
    - very bas support for static rendering
    - get initial props are not cached so you would need api or walk your api and predownload it in some json files - that would be aanoying build step
  - gatsby
    - ridiculously complicated
  - create react app + react-static
    - reasonable compromise

- react key attribute

- alternative vay to write gulp
  - how i did it in v1
  - execa

- visitelnost
  - je element videt ve viewportu/jinem elementu, nastaveni na procenta viditelnosti?
  - je element prekryvan jinym elementem?

- less common form fiels https://www.w3schools.com/html/html_forms.asp
  - target blank na formu
  - fieldset
  - select has size and multiple attribute
  - datalist output
  - input type reset
  - formaction formmethod formenctype formnovalidate formtarget
  - multiple attribute funguje i na input type email

- article super simple date/time pickers (from eventio)

- less common semantic tags
  - date/time
  - quotes
    <blockquote className={styles.quote}>
      <Text
        size={36}
        color="white"
        tag="p"
        quote
        className={styles.quote__text}
      >
        “Great, kid. Don’t get cocky.”
      </Text>
      <div className={styles.quote__separator} />
      <footer className={styles.quote__author}>
        <Text tag="span" size={18} color="gray-949ea8">
          Han Solo
        </Text>
      </footer>
    </blockquote>
  - code
  - abbrv
  - see list of all tags on mdn

- normalize.css
  - most is legacy stuff or stuff that you rarely use (dialog element)
  - some significant stuff
    /**
    * 1. Correct the line height in all browsers.
    * 2. Prevent adjustments of font size after orientation changes in
    *    IE on Windows Phone and in iOS.
    */

    html {
      line-height: 1.15; /* 1 */
      -ms-text-size-adjust: 100%; /* 2 */
      -webkit-text-size-adjust: 100%; /* 2 */
    }

    ---

    /**
    * Remove the margin in Safari.
    */

    button,
    input,
    select {
      margin: 0;
    }

  - other projects
    - https://github.com/csstools/sanitize.css
    - css resets

- https://css-tricks.com/useful-nth-child-recipies/

- tabindex-1 for whole element trees
  - https://stackoverflow.com/questions/38059140/when-to-use-the-disabled-attribute-vs-the-aria-disabled-attribute-for-html-eleme
  - https://github.com/GoogleChrome/inert-polyfill
  - https://html.spec.whatwg.org/multipage/interaction.html#inert
  - https://github.com/WICG/inert

- pagination done right
  - regular page vs cursor
  - blog you want cursor probably
  - disadvantages of cursor
    - https://twitter.com/jamiebuilds/status/1050141614302085120
  - should empty page return 204, 200 or 404?

class TabIndexHandler extends React.Component {
  // NOTE: If any element had tabindex attribute, this component would remove it

  static propTypes = {
    disableTabbing: PropTypes.bool.isRequired,
    children: PropTypes.node.isRequired
  };

  static skipAttribute = "data-tabindexhandlerignore";

  constructor() {
    super();

    this.wrapper = null;
    this.elements = [];
  }

  render() {
    return <div ref={el => (this.wrapper = el)}>{this.props.children}</div>;
  }

  gatherElements() {
    const elements = this.wrapper.querySelectorAll(
      "button, a, input, select, textarea"
    );

    this.elements = [...elements];
  }

  disableTabbing() {
    for (const element of this.elements) {
      if (element.hasAttribute(TabIndexHandler.skipAttribute)) continue;
      element.setAttribute("tabindex", -1);
    }
  }

  enableTabbing() {
    for (const element of this.elements) {
      if (element.hasAttribute(TabIndexHandler.skipAttribute)) continue;
      element.removeAttribute("tabindex");
    }
  }

  componentDidMount() {
    this.handleTabbing();
  }

  componentDidUpdate(prevProps) {
    if (prevProps.disableTabbing !== this.props.disableTabbing) {
      this.handleTabbing();
    }
  }

  handleTabbing() {
    this.gatherElements();
    if (this.props.disableTabbing) {
      this.disableTabbing();
    } else {
      this.enableTabbing();
    }
  }

  componentWillUnmount() {
    if (this.props.disableTabbing) {
      this.enableTabbing();
    }
  }
}

- font loading
  - how I did it on example project
  - font loading fallback
  - Fonts from https://fonts.google.com
  - Hosted locally, downloaded with help of https://google-webfonts-helper.herokuapp.com/fonts
  - For performance we add `font-display: optional` to all font definitions

- vue vs react
  - template cannot be top level

    Jeden student se ptal jakej si myslim ze je rozdil mezi Vue a Reactem. Tak kdyz uz jsem se s tim psal, tak to postnu i sem, treba to prijde nekomu zajimavy.
    ===
    Dobrý deň,

    V komentároch k mojej semestrálke Website Builder ste spomínali:

    "Ted uz je asi pozde ale pri pohledu na kod mi prijde ze jste nezvolil uplne vhodny framework. U takhle slozitych aplikaci kde se komponenty vytvareji/modifikuji/skladaji dynamicky bych rekl ze se to dela mnohem lepe v Reactu nez ve Vue”

    Môžem sa opýtať prečo si myslíte, že je vhodnejšie použiť React? Osobne som viac pracoval s Vue takže som nad voľbou frameworku moc nerozmýšľal. Vedeli by ste mi vysvetliť aké výhody by mal pri tomto probléme React? Vue už má aj svoj SSR framework a plánujem v budúcnosti tieto “vybuildené” stránky renderovať cez SSR s rovnakými komponentami ako na front-ende. Ta “Export” funkcia tam bola iba kvôli use case KAJ no v budúcnosti plánujem renderovať nakonfigurované komponenty(uložiť stav) cez SSR.

    Čo si o tom myslíte?

    S pozdravom,

    Peter Tóth (edited)
    ===
    Pekny den,

    - jestli uz mate zkusenosti s Vue, tak si s volbou nedelejte starosti, zas tolik se ty frameworky nelisi
    - co jsem myslel je ze kdyz mam komponentu ktera tvori / upravuje elementy ze slotu dynamicky tak casto musite misto klasicke <template> prejit na render metodu se kterou se pracuje uplne jinak nez s sablonami v template. Napr kdyz bych mel komponentu ktera chce vzit vsechny polozky ze slotu a pridat jim nejakou tridu, tak to nejde udelat pres <template> ale musim prepnout do render metody se kterou se pracuje uplne jinak nez s <template>. V porovnani s Reactem kde vlastne neni sablonovaci jazyk, pouze JSX coz je nejaka hezci syntaxe volani JS funkci, co vypada jako sablonovaci jazyk. Tak u Reactu byste tenhle "problem", kdy musim prepsat komponentu z sablon fo uplne jinak pracujici render funkce, nemel protoze v Reactu tohle striktni rozdeleni na <template> a data co se do nich posilaji neni, druha vec, kdyz sablony pisu v JS (JSX), tak nemuzu narazit na omezeni expresivnosti sablonovaciho jazyka (chci iterovat pres slot, a ke kazde polozce pridat tridu, ale sablonovaci jazyk to nemusi podporovat). V Reactu byste porad pouzival stejnou render metodu a stejne byste pracoval s komponentami co prisli do slotu (children), jako v jakychkoli jinych pripadech. Na druhou stranu mam pocit ze Vue umi pouzivat JSX ve svych komponentach a dokonce to i nekde v dokumentaci zminuji jako vhodnou alternativu kdyz ma clovek takhle hodne dynamicky tvorene sablony kdy mu uz nestaci "hloupejsi" sablonovaci jazyk, ale s tim jsem nikdy nepracoval takze nemuzu poreferovat.
    - co se tyce vyhod a nevyhod React vs Vue, tak tady par nahodnych poznamek ktere me ted napadly
    - jenom na uvod abyste vedel z jakeho pohledu to pisu, s Reactem jsem delal hlavne v Seznamu neco pres rok na nekolika projektech + v nem delam vetsinu osobnich projektu. S Vue mam zkusenosti mensi, delam s nim v aktualni praci neco okolo ctvrt roku, konkretne s frameworkem Nuxt ktery poskytuje i SSR

    - Vue ma sadu oficialnich knihoven (oficialni router, oficialni "Redux" na spravu stavu, vue-cli na generovani projektu)
    - React je v tomhle o dost vice roztristeny a clovek si musi tyhle veci vyhledat a pozapojovat do projektu sam. Ikdyz na druhou stranu posledni dobou se to hodne zlepsilo, kdyz chci aplikaci co se rendruje jenom na klientu muzu pouzit create-react-app. Kdyz chci neco co se rendruje na serveru muzu pouzit skvelej nextjs (ten mimo jine umi i export do staticke stranky, takze vysledek muze byt podobny jako u create-react-app)
    - Vue i React maji velice podobne dev tools, takze tady je to remiza. S Reactimi se mi pracovalo trochu lepe protoze v nich vidim jak React komponenty tak klasicke html elementy, ve Vue dev tools vidim jenom Vue komponenty coz me obcas matlo a hure se mi v tom orientovalo. Dokumentace mi prisla podobne dobra u obou projektu.
    - ve Vue jsou docela pekne single file komponenty, ale obcas clovek chce novou mini komponentu, kde bude nejaky sdileny kod, a neni mozne to dat do toho sameho souboru (jako v Reactu kde bych si proste nadefinoval novou tridu/funkci v danem souboru a pak ji pouzival v hlavni komponente), musi se kvuli tomu zakladat soubor novy (edited)
    - Reacti pristup kdy "sablony" jsou v podstate JavaScriptovy kod ktery si muzu libovolne generovat, obalovat a ukladat do promennych mi prijde flexibilnejsi a lepsi nez u Vue kde je klasictejsi pristup s sablonovacim jazykem (viz muj druhy komentar a odpoved na vasi hlavni otazku).
    - U Vue mi porad prijde trochu divne cpat js kod do stringu napr `<template v-if="requestState === 'LOADING'>`, navic v tom stringu je to nejak zvlastne evaluovano, takze tam nejde pouzit console.log na nejake rychle zalogovani. V Reactu je rozdil mezi sablonami s js kodem jasnejsi, navic scope js kodu je taky jasny, proste tam kde se nachazim s sablonou tak v tom jsem scopu (stejne jako u jakehokoli jineho js kodu).
    - Mnozstvi a kvalita knihoven mi prisla lepsi u Reactu ikdyz i u Vue to nebylo nijak spatne.
    - Vue ma o dost vetsi API, je sice pravda ze ma nektere pekne veci jako computed properties nebo treba watche, ale porad mi Reacti pristup, kde je jenom minumum metod, mi prijde sympatictejsi. Na druhou stranu neni to nijak zavratny rozdil, Vue i React razi docela podobny komponentovy pristup, takze kdyz clovek umi s Reactem tak prechod na Vue byl otazka hodin / par dni.
    - U Vue se o trochu lepe pracuje se stavem, proste napisu this.stavovaPromenna = novyStav a Vue se o vse postara protoze stavove promenne ma obalene, na druho stranu kdyz si zaloguju stavovou promennou tak to je nejaky Vue objekt ktery se hure inspectuje v konzoli
    - Vue se lepe zapojuje do stavajiciho projektu co je rendrovany nejakym jinych serverovym frameworkem, proste misto single file vue komponenty pouziju new Vue({ ... }) a sablony by meli jit prepouzit ze stavajiciho html (vue sablony jsou kompatibilni s html), nebo je muzu zapsat do stringu. U Reactu by tohle taky slo (az na prepouziti sablon z html), ale vyzadovalo by to vice usili na zapojeni do build procesu (za predpokladu ze clovek nechce psat React.createElement ale chce pouzivat JSX). Tohle jsem teda nikdy nepouzil ale zni to zajimave.
    - Trochu se mi nelibilo jak je u Vue vsechno cpane na this dane instance, jsou tam namichane stavove promenne, s computed promenymi s metodami, bez namespacu vsechno v jenom. Na druhou stranu props jsou namespacovane v this.$props ale pouze v JS kodu, v sablonach jsou bez namespacu. V reactu je to jasne namespacovane v this.state a this.props a neni rozdil mezi sablonami a normalnim js kodem.
    - Zaver: oba frameworky jsou si docela podobny protoze razi podobny komponentovy model, ale React mi je trochu blizsi svym pristupem a taky je oblibenejsi, takze je pro nej vic knihoven a navodu. Ale Vue taky neni spatna volba.

    PS: Moc jsem to po sobe necetl, tak se omlouvam za pripadne chyby :slightly_smiling_face:

    S pozdravem,
    Petr Hurtak

  - extra
    - propTypes u Vue jsou hloupy, umi jenom Array, nebo Object ale neumi zanoreny typy
    - na druhou stranu o dost lepe se tam pisou validator funkce a specifikujou defaulty
      - u reactu je propTypes a defaultProps, u Vue je to vsechno v jednom

- Article bolded text same width as regular text

- i18n
  - date.toLocaleString()
  - number.toLocaleString()
  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat
  - 2-digits does not work on some locales
    - https://bugs.chromium.org/p/chromium/issues/detail?id=527926
    - https://bugs.chromium.org/p/chromium/issues/detail?id=507037

- flexbox
  - flex-basis
  - flex: 0 0 200px
  - align-items vs justify-content

- increase clickable area of link/whatever
  - https://stackoverflow.com/questions/11078509/how-to-increase-the-clickable-area-of-a-a-tag-button
    - overlaping clickable areas?
  - padding - problem with aligning to the box - need to add negative margin and recalculate
- passwords
  - what not to do
    - plain text (password is private information. most users have same password everywhere)
    - regular hashes md5 - dictionary attack
    - regular hashes md5 + salt - hash is too fast
  - what to do
    - hashing function that is for passwords
    - how to store (bcrypt)
    - password comparison - timing attacks
      - https://snyk.io/blog/node-js-timing-attack-ccc-ctf/
    - updating from older hasing to newer hashing

- article white space typy, multiline ellipsis

- Animovaný otevírání položek a vůbec animace obecně https://twitter.com/0xca0a/status/995295846324494338?s=20

- spacing between components
  .Component {
    &:not(:first-child) {
        margin-top: 16px;
    }
  }

  .Component {
    margin-top: 16px;

    &:first-child {
        margin-top: 0;
    }
  }

  Spacer component

- how i do notes

- popups done right article

- ssr antipattern article

- meta viewport
  - https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag
  - https://stackoverflow.com/questions/33767533/what-does-the-shrink-to-fit-viewport-meta-attribute-do
  - doporuceni co davat standartne
  - zminit ze zakazani zoomu je spatna vec

- article - css arrow and shadow

- Article URL parsing https://twitter.com/jaffathecake/status/969534845050335232?s=20 a href trick, nodejs compatibility implementation, isomorphic polyfill package.

- chmod

- clanek textbox - offline support, localstorage na zapamatovani

- http authentication
  - WWW-Authenticate
  - Proxy-Authenticate

- kb v KiB

- macbook pro switch
  - tak studeny po ranu ze jsem si parkrat musel po ranu zahrat nejakou 3d hru aby se trochu zahral
  - keyboard
    - official layout has "§" in the place of "\", WTF??
    - external keyboard has command/control/option on different places than internal laptop keyboard so you need to switch them?
    - annoyingly low key travel, you get used to it but never stopped feeling "wrong"
    - retarded arrow keys, up and down is half size
    - missing keys like delete pageup down - annoying, you need to learn more gestures, but probably ok
    - media keys instead of function keys
      - i like this, i use volume up/down next track way more than function keys, so i like that this is default. And in reality even on windows you would not miss them because what function keys are you really using
        - f5 - cmd/control + r doest the refresh also
        - midnight commander, this is where you use them the most and it is little annoying
    - completly different keyboard layout - i like that the more common gestures loke copy and paste ale easier to reach (command is where alt is on regular keyboard), so your hands do not hurt as much compared to regular keyboards, but i still get confused and have no idea when to use command/option or control.
    - system keyboards do not fucking match what i have on keyboard backtick key is switched with backslash key, what the fuck??
  - regular mouses do not fucking work out of the box, every special key is mapped middle mouse button so when i plugged my mouse with back button it did nothing - this even works on Linux out of the box.
  - speakers - really good
  - window management
    - suprisingly i like the fullscreen, i thought it was super retarded but it actually made me like and use multiple desktops (i tried this on windows and linux and always went back to 1 workplace)
    - there is no maximize button like on windows or linux, so you see most users using 60% of the screen when only using one app - because there is no fucking maximize button, only fullscreen button which is not what you want most of the time. fortunately there is great app called Magnet, that does exactly this
  - macos
    - notification centre - just as useless as on windows
    - time - when you click on time in top bar it does not expand to small month calendar like on Win/Linux, annoying since i got used to this feature
    - sound in top bar - it only expands to volume bar, on Linux it shoved spotify controls and on windows you could expand to sound mixed of all apps playing sound
  - usb-c annoying, you need adapter for anything
    - there are all in one adapters that solve this but they are expensive ~70USD
    - do not buy cheap ones, they might not work, i brought some and when i plugged it in, wifi stopped working because it interfired with usb3 and 2.4ghz wifi - appearently this is because macos is from metal and there is not as much protection to filter this interference (wtf), so it will probably work with other computers but not on your mac. So you either buy more expensive one or you wrap the hub in aluminium foil (this was actually recommnended on some macos forums, wtf??)
  - app store
    - super slow
    - slightly more useful than windows store
  - dmg
    - i like that it is sandboxed until you drag it into the applications folder
    - the common drag app to applications folder is fucked up if you enable displaying dotfiles in finder
  - finder
    - no go up one folder button (wtf??), there is cmd+up shortcut, but still wtf?
    - way worse than windows finder, which actually got ok over time
    - it does not tell you where you are in the folder structure, you can add special button that kinda tells you but you still need to click it to find you where you are
    - enter fakin renames instead of opening the folder / app, wtf?? i am opening 100x more than renaming so wtf? if you want to open you either need to click on your mouse or you need to learn cmd+o shortcut
    - space does quick preview of the file, pretty nice
    - when you open picture in macos default image viewer app called "Preview" it does not allow cycling to next/previous image - what the actuall fuck??
      - you can press the space to shou quick preview, this is pretty nice, but again does not allow you to cycle between images, you actually need to select more images and then press space, wtf??
      - there is special cover flow view type that actually does the image cycling and is pretty nice, better than windows and linux
    - it creates the .DS_Store file all over the place in every fucking directory you touch with this program.
    - creating new folder is ridiculous, you cant actually click on folder and tell it create new directory
      - you either need to find empty row (which is top level, you might want to create directory somewhere nested) and right click new directory
      - or you need to click on action button at the top and select create directory - wich then proceeds to crate not in the directory you selected but in the fucking top level, what the fuck??
  - fullscreen
    - really cool, when you play fullscreen game you can smoothly switch to another desktop with three fingers swipe or control+left/right
  - touchpad
    - nice
    - dont mind the bigger size - no problems when typing
    - no buttons - ok and sometimes easier to use for the easy stuff (clicking with right mouse button on link to open in new window). but for anything more serious (dragging file/folder between windows) it is worse - and way less reliable
  - office suite
    - free comapred to windows so that is really nice
    - simpler and easier to use than office it seemed, i used it for the first time and the stuf i wanted to do in the Numbers app were usualy very easy to find, i am not saying that the simple stuff I do is hard in office, but it seemed easier in Apple suite. Nice
  - for non profesional work (emails, calendar, web browser stuff) macos feels nicer compared to other 2 systems, trackpack gestures are really nice. but once you start doing some more serious stuff the new/weirh keyboard layout and other unusual stuff starts getting in the way
  - you need to download some 3rd party software to open android phones, wtf???
  - cant write to ntfs drives, only read
  - jack connector is really tight, after you put it it, it is hard to pull out.
  - when I plug in headphones with microphone, it is not possible to use internal microphone

- todos apps mostly useless - google calendar

- CORS hlavicky
  - co vsechno musi backend vracet
  - k cemu to vubec je
  - je potreba neco navic u postu?
  - options request
  - ukazka cors proxy?

- element
  - viewport size
    - zoomed in?
  - obrazky.cz repo - there will be good code examples
  - dimensions
  - is visible
  - page size

- dimension ration
  - LESS
      - .u-dimension-ratio (@ratio) {
        width: 100%;
        height: 0;
        padding-bottom: unit(100 / @ratio, %);
      }
  - React component with pure CSS
  - Pure CSS solution with Suit?
  - How it works - height 0, why padding with percentages...

- time tag
  <time
    class="Article-datetime"
    title="{{ metadata.dateLastUpdate | fullDate }}"
    datetime="{{ metadata.dateLastUpdate | datetimeAttribute }}"
    data-date-convert
  >
    {{ metadata.dateLastUpdate | fullDate }}
  </time>

- specifying styles for text
  - default styles (p, h1 has margin)
  - evolution:
    - typography variables, mixins
    - suit/bem
  - react:
    - suit/bem
    - Text component from Calendar project
      - can be used outside of react in Bem/SuitCSS
  - steidas article

- local storage
  - localStorage.set('key', 1) vs localStorage.key = 1
  - get the size of local storage
  - size overflow error

- unicode box drawing characters
  - https://en.wikipedia.org/wiki/Box-drawing_character
  - use line-height: 0 so the vertical lines align

- url parts

- images done right
  - width & height properly set with img tags
  - responsive
    - width 100% height auto
  - sizes are properly set event on mobile
    - mixin for 16:9 size

- article optional array/object fields - sbread operator and before spread operator

- bash script basics
  - shebang
  - chmod u+x file
  - set -e
  - variables
  - cd to current directory
  - source file vs ./file
  - if else
  - functions
  - cli arguments
  - running stuff in background &
  - capturing pid and then killing background stuff

- CORS
  - CORS http requests
    - with credentials
  - headers
  - https://github.com/pillarjs/understanding-csrf/blob/master/README.md
  - simple cors proxy
    #!/usr/bin/env node

    const request = require('request')
    const express = require('express')
    const bodyParser = require('body-parser')
    const cors = require('cors')

    const port = process.env.REACT_APP_DEV_PROXY_PORT || 3001

    const app = express()
    app.use(bodyParser.json())
    app.use(
      cors({
        origin: (origin, callback) => callback(null, true),
        optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204
      })
    )

    app.post('/', function (req, res) {
      const origin = req.get('origin')

      // TODO: might not be needed in the future as soon as dev api will stop
      // returning Access-Control-Allow-Origin header
      res.setHeader('Access-Control-Allow-Origin', origin)

      request({
        method: 'POST',
        url: req.body.apiUrl,
        json: true,
        body: {
          plugins: req.body.apiModules || [],
          url: req.body.queryUrl
        }
      })
        .on('response', response => {
          if (response.statusCode === 204) {
            response.statusCode = 200
          }

          // TODO: might not be needed in the future as soon as dev api will stop
          // returning Access-Control-Allow-Origin header
          response.headers['Access-Control-Allow-Origin'] = origin
        })
        .on('error', err => console.error('[PROXY]', err))
        .pipe(res)
    })

    app.listen(port)

- determine lightness of color
  - http://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color/24213274#24213274

- what every page should contain
  - <html lang="cs">
  - <meta charset="utf-8">
  - <meta name="viewport" content="width=device-width,initial-scale=1">
  - css border box reset
  - css body margin 0 stuff?
  - maybe mention
    - <title>Je čas.cz – moderní tvorba webových stránek</title>
    - <meta name="description" content="Poznámky o moderním webdesignu, hotová řešení, experimenty a návody.">

- web video
  - how to record on linux
    - vokoscreen
    - kdenlive
  - how to display in page
    - video element stuff

- hover image preloading
  - how browser decides what is fetched
  - js to preload images

- debian packaging introduction
  - basic packaging of static files
  - running some script during packaging (makefile override)
  - how dependencies work
  - how installation work

- cross origin
  - why it was introduces
  - security limitations of responding *
  - proxy workaround

- cryptographically secure random number
  https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba
  ## Cryptographic randomness

  The `window.crypto.getRandomValues()` function lets you get cryptographically strong random values. The array given as the parameter is filled with random numbers (random in its cryptographic meaning).

  This function takes TypedArray of certain size and fill it with random numbers in range of the typed array, eg if it is 8Bit array, values will be between 0-255.

  ```js
  const randomNumber = window.crypto.getRandomValues(new Uint8Array(1))[0]
  ```

  To guarantee enough performance, implementations are not using a truly random number generator, but they are using a pseudo-random number generator seeded with a value with enough entropy. The PRNG used differs from one implementation to the other but is suitable for cryptographic usages. Implementations are also required to use a seed with enough entropy, like a system-level entropy source.

  var cryptoStor = new Uint16Array(8);
  (In this case, we’re creating an array with eight different slots that can each contain an unsigned 16-bit integer. Other interger options include Int8Array, Uint8Array, int16Array, Int32Array and Uint32Array.

  Then, fill the array with random numbers of the defined type:

  window.crypto.getRandomValues(cryptoStor);
  Showing the collected values in the console:

  > [43484, 57947, 46691, 49849, 24272, 11827, 28203, 17423]
  The Web Cryptography API has good support in modern browsers, although it is vendor prefixed in some cases.

  - If you want numbers in certain range, you might do +min and %max, but that might leave uneven distribution. Add example code where we just ask for new number again.

  ```js
  function generateCryptoRandomNumber (min, max) {
    const distance = max - min
    const maxDistance = 2 ** 32 - 1

    if (distance > maxDistance) throw new Error('Maximum is too big')

    let randomNumber
    do  {
      randomNumber = window.crypto.getRandomValues(new Uint32Array(1))[0]
    } while (randomNumber >= maxDistance - (maxDistance % distance))

    return randomNumber % (distance + 1) + min
  }

  console.log(generateCryptoRandomNumber(1, 100))
  ```
