
  const sortedMenu = newMenu.sort((a, b) => {
    const titleA = a.title
    const titleB = b.title

    if (titleA.localeCompare) {
      // if browser supports String.prototype.localeCompare properly sort strings with diacritics
      let currentIndex = 0

      let currentCharA = titleA[currentIndex]
      let currentCharB = titleB[currentIndex]
      while (currentCharA && currentCharB) {
        const compare = currentCharA.localeCompare(currentCharB)
        if (compare >= 1) {
          return 1
        } else if (compare <= -1) {
          return -1
        }

        currentIndex++
        currentCharA = titleA[currentIndex]
        currentCharB = titleB[currentIndex]
      }

      return 0
    } else {
      // regular sort
	// we should do regex replace š -> s to make sure these letters are at least next to each other
      if (titleA > titleB) {
        return 1
      } else if (titleA < titleB) {
        return -1
      } else {
        return 0
      }
    }
  })



Could be npm module where user would supply the diacritics map

Watchout it is considerably slower
	http://stackoverflow.com/questions/14677060/400x-sorting-speedup-by-switching-a-localecompareb-to-ab-1ab10

	My quick console.time showed it was 3x-6x slower


Maybe use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
	Also measure performance




Also we could have pure js implementation
	Here is from JAK library


/**
 * porovnani retezcu na zaklade znaku z ceske abecedy
 */
String.prototype.CS_ALPHABET = "0123456789AÁBCČDĎEĚÉFGHCHIÍJKLMNŇOÓPQRŘSŠTŤUÚŮVWXYÝZŽaábcčdďeěéfghchiíjklmnňoópqrřsštťuúůvwxyýzž";

String.prototype.localeCSCompare = function(value) {
	value += ""; // explicitne prevedeme na string
	if (this+"" === value) { return 0; } // pokud jsou retezce totozne, neni co resit, vracime 0

	/* chceme vzdy jako parametr zpracovavat primarne kratsi retezec */
	if (this.length < value.length) { return -value.localeCSCompare(this); }

	/* zjistime, ktery retezec je kratsi a pomoci nej se bude cyklus ridit */
	var i = 0;
	var j = 0;
	var length = value.length;
	var charValue = '';
	var charThis = '';
	var indexValue = 0;
	var indexThis = 0;

	while (i < length) {
		/* nacteme vzdy jeden znak z kazdeho z retezcu */
		charValue = value.charAt(i);
		charThis = this.charAt(j);

		/* c je podezrely znak, protoze po nem muze nasledovat h a mame najednou znak ch */
		if (charThis.toLowerCase() == 'c') {
			var tempString = this.substring(j, j + 2);
			if (tempString == "ch" || tempString == "CH") {
				j++;
				charThis = tempString;
			}
		}

		/* to stejne plati i pro druhy retezec, c je podezrely znak pouze v pripade, ze neni na konci retezce */
		if (charValue.toLowerCase() == 'c') {
			var tempString = value.substring(i, i + 2);
			if (tempString == "ch" || tempString == "CH") {
				i++;
				charValue = tempString;
			}
		}

		/* zjistime si, kde se v nasi abecede nachazi */
		indexValue = this.CS_ALPHABET.indexOf(charValue);
		indexThis = this.CS_ALPHABET.indexOf(charThis);

		/* pokud jsme narazili na ruzne znaky, koncime */
		if (charValue != charThis) { break; }

		/* jinak zvetsime o jednicku a pokracujeme */
		i++; j++;
	}

	if (i == length) { return 1; } /* zadny rozdil => this je nadmnozina value */

	if (indexValue == indexThis) { /* oba mimo abecedu */
		return charThis.localeCompare(charValue);
	} else if (indexThis == -1) { /* tento mimo abecedu */
		return -1;
	} else if (indexValue == -1) { /* druhy mimo abecedu */
		return 1;
	} else {
		return indexThis - indexValue; /* rozdil indexu v abecede */
	}
}


